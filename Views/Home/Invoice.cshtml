@model InvoiceManager.Models.ViewModels.EditInvoiceViewModel
@{
    ViewBag.Title = Model.Heading;
}

<h1 class="mb-3">@Model.Heading</h1>

@if (Model.Invoice.Id != 0)
{

    <button class="btn btn-primary"
            onclick='window.location.href="@Url.Action("InvoicePosition", "Home",
                                          new { invoiceId = Model.Invoice.Id })"'>
        Dodaj pozycję
    </button>

    <button class="btn btn-secondary" onclick="generatePdf()">
        Generuj PDF
    </button>

    <button class="btn btn-warning"
            onclick="printInvoice()">
        Drukuj
    </button>

    <button class="btn btn-outline-dark"
            onclick='window.location.href="@Url.Action("Index", "Email",
                                          new { invoiceTitle = Model.Invoice.Title, 
                                              clientEmail = Model.Invoice.Client.Email,
                                              userEmail = Model.Invoice.User.Email})"'>
        Wyślij
    </button>

}

<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm("Invoice", "Home"))
        {
            @Html.AntiForgeryToken()

            if (Model.Invoice.Id == 0)
            {
                <p class="alert alert-info mt-2 mb-2">
                    Pola takie jak tytuł, klient, sposób i termin płatności są
                    <strong>wymagane</strong>
                </p>
            }

            @Html.HiddenFor(x => x.Invoice.Id)
            @Html.HiddenFor(x => x.Invoice.UserId)
            


            <div class="form-group row m-1">
                @Html.LabelFor(x => x.Invoice.Title)
                @Html.TextBoxFor(x => x.Invoice.Title,
                    new { @class = "form-control mt-2", autofocus = "autofocus" })
                @Html.ValidationMessageFor(x => x.Invoice.Title)
            </div>

            <div class="form-group row m-1">
                @Html.LabelFor(x => x.Invoice.ClientId)
                @Html.DropDownListFor(x => x.Invoice.ClientId,
                    new SelectList(Model.Clients, "Id", "Name"), "--Wybierz klienta--",
                    new { @class = "form-control mt-2" })
                @Html.ValidationMessageFor(x => x.Invoice.ClientId)
            </div>

            if (Model.Invoice.Id != 0)
            {
                <div class="form-group row m-1">
                    @Html.LabelFor(x => x.Invoice.Value)
                    @Html.TextBoxFor(x => x.Invoice.Value,
                          new { @class = "form-control mt-2", @readonly = "readonly" })
                </div>
            }

            <div class="form-group row m-1">
                @Html.LabelFor(x => x.Invoice.PaymentMethodId)
                @Html.DropDownListFor(x => x.Invoice.PaymentMethodId,
                 new SelectList(Model.PaymentMethods, "Id", "Name"), "--Wybierz sposób płatności--",
                     new { @class = "form-control mt-2" })
                @Html.ValidationMessageFor(x => x.Invoice.PaymentMethodId)
            </div>


            <div class="form-group row m-1">
                @Html.LabelFor(x => x.Invoice.PaymentDate)
                @Html.TextBoxFor(x => x.Invoice.PaymentDate, "{0:dd-MM-yyyy}",
                    new
                         {
                             @class = "form-control mt-2",
                             @id = "PaymentDate",
                    autocomplete = "off"
                         })
                @Html.ValidationMessageFor(x => x.Invoice.PaymentDate)
            </div>

            <div class="form-group row m-1">
                @Html.LabelFor(x => x.Invoice.Comments)
                @Html.TextAreaFor(x => x.Invoice.Comments,
                    new { @class = "form-control mt-2" })
            </div>
            <button class="btn btn-primary btn-lg mt-2 " type="submit">
                Zapisz
            </button>
        }

    </div>

    <div class="col-lg-5 offset-lg-1">
        @if (Model.Invoice.Id != 0)
        {
            @Html.Partial("_InvoicePosition", Model.Invoice.InvoicePositions)
        }
    </div>

</div>


@section Scripts
{
    <script type="text/javascript">

        function generatePdf() {

            $.ajax({
                type: 'POST',
                url: "@Url.Action("InvoiceToPdf", "Print")",
data: {
                    invoiceId: '@Model.Invoice.Id'
                },
                success: function (data) {
                    window.location = '@Url.Action("DownloadInvoicePdf", "Print")'

                    + '?fileGuid=' + data.FileGuid + '&fileName=' + data.FileName;
                },
                error: function (data) {
                    alert(data.Message);
                },
                dataType: 'json',
                cache: false
            });
        }

        function printInvoice() {
            var url = '@Url.Action("PrintInvoice", "Print")' + '?invoiceId=' + @Model.Invoice.Id;

            var printWindow = window.open(url, "", 'width=800', 'heigh=600');

            printWindow.print();
            printWindow.onafterprint = function () {
                printWindow.close;
            }
        }

        function deleteInvoicePosition(positionId, invoiceId, btn) {

            if (!confirm("Czy napewno chcesz usunąć tę pozycję faktury?"))
                return;

            $.ajax({
                type: 'POST',
                url: "@Url.Action("DeletePosition", "Home")",
                data: {
                    positionId: positionId,
                    invoiceId: invoiceId,

                },
                success: function (data) {
                    if (data.Success) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row)

                        $('#Invoice_Value').val(data.InvoiceValue.toFixed(2).replace(".", ","));
                    }
                    else {
                        alert(data.Message);
                    }
                },
                error: function (data) {
                    alert(data.Message);
                },
                dataType: 'json'
            });
        }

        $(document).ready(function () {

            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }

            $.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/
                        .test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };

            $('#PaymentDate').datepicker({
                format: "dd-mm-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });
        })

    </script>
}


